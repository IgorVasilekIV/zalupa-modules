__version__ = (0, 5, 5)

"""
Search words definitions in Urban Dictionary through their API

TODO: add inline buttons for translation (ru/en) using googletrans / self._client.translate_message
"""

# —á–∞—Ç–≥–ø—Ç –∫–æ—Ä–º–∏—Ç, –±–æ–ª—å–Ω—ã–µ –º–æ–∑–≥–∏ —Ç–æ–∂–µ
#
# meta banner: https://files.catbox.moe/swqxd1.png
# meta developer: @HikkaZPM
#
# The module is made as a joke, all coincidences are random :P
#
#       –∫–æ—Ç –≤–∞—Ö—É–∏
#       /\_____/\
#      /  o   o  \
#     ( ==  ^  == )
#      )         (
#     (           )
#    ( (  )   (  ) )
#   (__(__)___(__)__)
#
#

from .. import loader, utils
import aiohttp

@loader.tds
class UrbanDictionaryMod(loader.Module):
    """–ü–æ–∏—Å–∫ —Å–ª–æ–≤ –≤ Urban Dictionary"""
    
    strings = {
        "name": "UrbanDict",
        "no_term": "ü§î <b>–ß—Ç–æ –∏—Å–∫–∞—Ç—å?</b>",
        "no_results": "üòï <b>–ù–µ –Ω–∞–π–¥–µ–Ω–æ</b>",
        "error": "‚ùå <b>{}</b>"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "definitions",
                3,
                doc="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞",
                validator=loader.validators.Integer(minimum=1, maximum=8)
            )
        )


    async def _get_definition(self, term: str):
        """–ü–æ–ª—É—á–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    "https://api.urbandictionary.com/v0/define",
                    params={"term": term},
                    timeout=5
                ) as resp:
                    if resp.status != 200:
                        return None
                        
                    data = await resp.json()
                    if not data.get("list"):
                        return None
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–∞–π–∫–æ–≤
                    definitions = sorted(
                        data["list"], 
                        key=lambda x: x.get('thumbs_up', 0), 
                        reverse=True
                    )
                    
                    return definitions[:int(self.config["definitions"])]
        except:
            return None

    def _format_def(self, d: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"""
        def cleanup(text: str) -> str:
            """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç —Ä–∞–∑–º–µ—Ç–∫–∏"""
            return text.replace('[','').replace(']','').strip()
            
        definition = cleanup(d["definition"])
        example = cleanup(d["example"]) if d.get("example") else "–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞"
        
        rating = f"üëç {d.get('thumbs_up', 0):,} ‚Ä¢ üëé {d.get('thumbs_down', 0):,}"
        
        return (
            f"<b>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</b>\n"
            f"{definition}\n\n"
            f"üí≠ <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            f"<i>{example}</i>\n\n"
            f"{rating}"
       )

    @loader.unrestricted
    async def udcmd(self, message):
        """[—Å–ª–æ–≤–æ] - –Ω–∞–π—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"""
        term = utils.get_args_raw(message)
        if not term:
            await utils.answer(message, self.strings["no_term"])
            return

        defs = await self._get_definition(term)
        if not defs:
            await utils.answer(message, self.strings["no_results"])
            return

        # —Å–æ–±–∏—Ä–∞–µ–º –≤ –æ–¥–Ω—É –∫—É—á—É
        formatted_defs = []
        for i, d in enumerate(defs, 1):
            formatted_defs.append(
                f"<blockquote expandable>{self._format_def(d)}</blockquote>"
            )
        
        text = "".join(formatted_defs)
        await utils.answer(message, text)