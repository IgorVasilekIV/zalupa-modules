# —á–∞—Ç–≥–ø—Ç –∫–æ—Ä–º–∏—Ç, –±–æ–ª—å–Ω—ã–µ –º–æ–∑–≥–∏ —Ç–æ–∂–µ
#
# meta banner: https://files.catbox.moe/swqxd1.png
# meta developer: @HikkaZPM
#
# The module is made as a joke, all coincidences are random :P
#
#       –∫–æ—Ç –≤–∞—Ö—É–∏
#       /\_____/\
#      /  o   o  \
#     ( ==  ^  == )
#      )         (
#     (           )
#    ( (  )   (  ) )
#   (__(__)___(__)__)
#
#
from .. import loader, utils
from telethon.tl.types import Message
from telethon.tl.types import InlineKeyboardMarkup, InlineKeyboardButton
import aiohttp
import logging
import json

logger = logging.getLogger(__name__)

UD_API_KEY = "99729790b5mshd8ec94082f78c14p1dbb97jsn52ae508bea0d"

@loader.tds
class UrbanDictionaryMod(loader.Module):
    """–ü–æ–∏—Å–∫ —Å–ª–µ–Ω–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ UrbanDictionary, –ø–∏—à–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞ (–ø–µ—Ä–µ–≤–æ–¥ –≤ –±—É–¥—É—é—â–µ–º)"""

    strings = {"name": "UrbanDictionary"}
    
    def __init__(self):
        self._ud_cache = {}

    async def ud_search(self, term: str):
        """–ó–∞–ø—Ä–æ—Å –∫ Urban Dictionary API"""
        url = "https://mashape-community-urban-dictionary.p.rapidapi.com/define"
        headers = {
            "X-RapidAPI-Key": UD_API_KEY,
            "X-RapidAPI-Host": "mashape-community-urban-dictionary.p.rapidapi.com"
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=headers, params={"term": term}) as resp:
                    if resp.status != 200:
                        return {"error": f"API Error: {resp.status}"}
                    return (await resp.json()).get("list", [])[:3]
        except Exception as e:
            logger.error(f"Urban error: {e}")
            return {"error": str(e)}

    async def format_definition(self, item: dict, current_page: int, total_pages: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        definition = item.get("definition", "No definition").replace("[", "").replace("]", "")
        example = item.get("example", "No example").replace("[", "").replace("]", "")
        
        return (
            f"üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}/{total_pages}\n\n"
            f"üëç {item.get('thumbs_up', 0)} | üëé {item.get('thumbs_down', 0)}\n"
            f"üìù <b>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</b>\n<i>{definition[:250]}</i>\n\n"
            f"üí¨ <b>–ü—Ä–∏–º–µ—Ä:</b>\n<i>{example[:200]}</i>"
        )

    @loader.unrestricted
    async def udcmd(self, message: Message):
        """–ü–æ–∏—Å–∫ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "<emoji document_id=5237993272109967450>‚ùå</emoji> –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞!")
            return

        result = await self.ud_search(args)

        if isinstance(result, dict) and "error" in result:
            await utils.answer(message, f"<emoji document_id=5210952531676504517>‚ùå</emoji> –û—à–∏–±–∫–∞: {result['error']}")
            return

        if not result:
            await utils.answer(message, f"<emoji document_id=5316509307255137126>üîç</emoji> –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è '{args}'")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        self._ud_cache = {
            "results": result,
            "term": args,
            "page": 0
        }

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"ud_nav:{0}:prev"
                ),
                InlineKeyboardButton(
                    text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                    callback_data=f"ud_nav:{0}:next"
                )
            ]
        ]

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        response = await self.format_definition(result[0], 0, len(result))

        await message.respond(
            response,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def ud_nav_callback(self, call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        if not call.data.startswith("ud_nav:"):
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        _, current_page, direction = call.data.split(":")
        current_page = int(current_page)

        if not self._ud_cache:
            await call.answer("‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, —Å–¥–µ–ª–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫")
            return

        results = self._ud_cache["results"]
        new_page = current_page

        if direction == "next" and current_page < len(results) - 1:
            new_page = current_page + 1
        elif direction == "prev" and current_page > 0:
            new_page = current_page - 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"ud_nav:{new_page}:prev"
                ),
                InlineKeyboardButton(
                    text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                    callback_data=f"ud_nav:{new_page}:next"
                )
            ]
        ]

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        response = await self.format_definition(results[new_page], new_page, len(results))

        await call.edit(
            response,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

