# —á–∞—Ç–≥–ø—Ç –∫–æ—Ä–º–∏—Ç, –±–æ–ª—å–Ω—ã–µ –º–æ–∑–≥–∏ —Ç–æ–∂–µ
#
# meta banner: https://files.catbox.moe/u91fwo.jpg (a gde femboy set üòî)
# meta developer: @HikkaZPM
#
# The module is made as a joke, all coincidences are random :P
# 
#       –∫–æ—Ç –≤–∞—Ö—É–∏
#       /\_____/\
#      /  o   o  \
#     ( ==  ^  == )
#      )         (
#     (           )
#    ( (  )   (  ) )
#   (__(__)___(__)__)
# 
# 
#

from .. import loader, utils
import aiohttp
import logging

logger = logging.getLogger(__name__)

@loader.tds
class AurSearchMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –≤ AUR (Arch User Repository)"""
    strings = {"name": "AURSearch"}

    async def client_ready(self, client, db):
        self._client = client

    @loader.unrestricted
    async def aurcmd(self, message):
        """–ü–æ–∏—Å–∫ –ø–∞–∫–µ—Ç–æ–≤ –≤ AUR. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .aur <–∑–∞–ø—Ä–æ—Å>"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ AUR\n–ü—Ä–∏–º–µ—Ä: <code>.aur neofetch</code>")
            return

        url = f"https://aur.archlinux.org/rpc/?v=5&type=search&arg={args}"
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status != 200:
                        await utils.answer(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ AUR (–∫–æ–¥ {response.status})")
                        return
                    
                    data = await response.json()
                    
            if data["resultcount"] == 0:
                await utils.answer(message, f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É <code>{args}</code> –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
                
            packages = data["results"][:8]
            response_text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ AUR –¥–ª—è <code>{args}</code>:\n\n"
            
            for pkg in packages:
                pkg_url = f"https://aur.archlinux.org/packages/{pkg['Name']}"
                response_text += (
                    f"<blockquote expandable>üì¶ <b><a href='{pkg_url}'>{pkg['Name']}</a></b> ({pkg['Version']})\n"
                    f"‚îî {pkg.get('Description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}\n\n"
                )
            
            if data["resultcount"] > 5:
                response_text += f"</blockquote>‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞–Ω–æ 5 –∏–∑ {data['resultcount']} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"

        except aiohttp.ClientError:
            await utils.answer(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ AUR")
        except Exception as e:
            logger.exception("AUR search error")
            await utils.answer(message, f"üö´ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

        await utils.answer(message, response_text)
