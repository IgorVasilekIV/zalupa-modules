__version__ = (2, 3, 0)

"""
üòò fork info: Inline buttons in PM (Allow/Deny/Block); auto-allow contacts; bots always allowed; auto-block after 3 msgs + notify (Saved Messages); pretty .allowed listing
"""

# @Sekai_Yoneya (main author btw)

from .. import loader, utils
from telethon import functions, types, events, Button
import logging

logger = logging.getLogger(__name__)

@loader.tds
class AntiPMMod(loader.Module):
    """Anti-PM with inline buttons, auto-allow contacts, auto-block after 3 msgs, notifications"""

    strings = {
        "name": "Anti-PM",
        "pm_off": "<b>–¢–µ–ø–µ—Ä—å –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</b>",
        "pm_on": "<b>–í—ã –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</b>",
        "pm_allowed": "<b>–Ø —Ä–∞–∑—Ä–µ—à–∏–ª {} –ø–∏—Å–∞—Ç—å –º–Ω–µ.</b>",
        "pm_deny": "<b>–Ø –∑–∞–ø—Ä–µ—Ç–∏–ª {} –ø–∏—Å–∞—Ç—å –º–Ω–µ.</b>",
        "blocked": "<b>{} –±—ã–ª –∑–∞–Ω–µ—Å—ë–Ω –≤ –ß–µ—Ä–Ω—ã–π –°–ø–∏—Å–æ–∫.</b>",
        "unblocked": "<b>{} –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –ß–µ—Ä–Ω–æ–≥–æ –°–ø–∏—Å–∫–∞.</b>",
        "addcontact": "<b>{} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã.</b>",
        "delcontact": "<b>{} —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.</b>",
        "who_to_block": "<b>–£–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.</b>",
        "who_to_unblock": "<b>–£–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.</b>",
        "who_to_contact": "<b>–£–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ç–∞–∫—Ç.</b>",
        "who_to_delcontact": "<b>–£–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.</b>",
        "no_args": "<b>–ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ä–µ–ø–ª–∞—è.</b>",
        "not_pm": "<b>–≠—Ç–æ –Ω–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.</b>",
        "allowed_header": "<b>–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n",
        "_cfg_custom_message": "–ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–µ –Ω–∞ –õ–°",
        "_cfg_auto_allow_contacts": "–ê–≤—Ç–æ—Ä–∞–∑—Ä–µ—à–∞—Ç—å –≤—Å–µ–º –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (True/False)",
    }

    strings_ru = {
        "name": "Anti-PM",
        "pm_off": "<b>–¢–µ–ø–µ—Ä—å –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</b>",
        "pm_on": "<b>–í—ã –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</b>",
        "pm_allowed": "<b>–Ø —Ä–∞–∑—Ä–µ—à–∏–ª {} –ø–∏—Å–∞—Ç—å –º–Ω–µ.</b>",
        "pm_deny": "<b>–Ø –∑–∞–ø—Ä–µ—Ç–∏–ª {} –ø–∏—Å–∞—Ç—å –º–Ω–µ.</b>",
        "blocked": "<b>{} –±—ã–ª –∑–∞–Ω–µ—Å—ë–Ω –≤ –ß–µ—Ä–Ω—ã–π –°–ø–∏—Å–æ–∫.</b>",
        "unblocked": "<b>{} –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –ß–µ—Ä–Ω–æ–≥–æ –°–ø–∏—Å–∫–∞.</b>",
        "addcontact": "<b>{} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã.</b>",
        "delcontact": "<b>{} —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.</b>",
        "who_to_block": "<b>–£–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.</b>",
        "who_to_unblock": "<b>–£–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.</b>",
        "who_to_contact": "<b>–£–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ç–∞–∫—Ç.</b>",
        "who_to_delcontact": "<b>–£–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.</b>",
        "no_args": "<b>–ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ä–µ–ø–ª–∞—è.</b>",
        "not_pm": "<b>–≠—Ç–æ –Ω–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.</b>",
        "allowed_header": "<b>–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n",
        "_cfg_custom_message": "–ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–µ –Ω–∞ –õ–°",
        "_cfg_auto_allow_contacts": "–ê–≤—Ç–æ—Ä–∞–∑—Ä–µ—à–∞—Ç—å –≤—Å–µ–º –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (True/False)",
    }

    def __init__(self):
        self.me = None
        self._cb_handler_added = False

        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "custom_message",
                "–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –≤–∫–ª—é—á—ë–Ω –∞–≤—Ç–æ–±–ª–æ–∫. –ù–∞–ø–∏—à–∏ –≤—Å—ë –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –æ–∂–∏–¥–∞–π –æ—Ç–≤–µ—Ç–∞.",
                lambda: self.strings("_cfg_custom_message"),
            ),
        )
        
        self.auto_allow_contacts = True

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.me = await client.get_me()
        # register callback query handler once
        if not self._cb_handler_added:
            client.add_event_handler(self._callback_query, events.CallbackQuery)
            self._cb_handler_added = True

    # -------- Commands --------
    async def pmcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π: .pm ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏-PM (–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å)."""
        pm = self.db.get("Anti-PM", "pm")
        # Note: original semantics preserved: pm==True -> receiving messages (anti-PM off)
        if pm is not True:
            await utils.answer(message, self.strings["pm_off"])
            self.db.set("Anti-PM", "pm", True)
        else:
            await utils.answer(message, self.strings["pm_on"])
            self.db.set("Anti-PM", "pm", False)

    async def allowcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π: .allow ‚Äî —Ä–∞–∑—Ä–µ—à–∏—Ç—å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–∏—Å–∞—Ç—å –≤–∞–º –≤ –ª–∏—á–∫—É (–≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ/—Ä–µ–ø–ª–∞–µ)."""
        if not message.is_private:
            return await message.edit(self.strings["not_pm"])
        user = await message.client.get_entity(message.chat_id)
        allowed = set(self.db.get("Anti-PM", "allowed", []))
        allowed.add(user.id)
        self.db.set("Anti-PM", "allowed", list(allowed))
        # reset counters and prompts
        self.db.set("Anti-PM", f"count_{user.id}", 0)
        await utils.answer(message, self.strings["pm_allowed"].format(user.first_name))

    async def blockcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π: .block ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–ø–ª–∞–π/–∞—Ä–≥—É–º–µ–Ω—Ç)."""
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        if message.is_private:
            user = await message.client.get_entity(message.chat_id)
        else:
            if reply:
                user = await message.client.get_entity(reply.sender_id)
            else:
                if not args:
                    return await message.edit(self.strings["who_to_block"])
                user = await message.client.get_entity(int(args) if args.isnumeric() else args)
        await message.client(functions.contacts.BlockRequest(user))
        await utils.answer(message, self.strings["blocked"].format(user.first_name))

    async def allowedcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π: .allowed ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        allowed = self.db.get("Anti-PM", "allowed", [])
        if not allowed:
            return await utils.answer(message, "<b>–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.</b>")
        text = self.strings["allowed_header"]
        number = 0
        for uid in allowed:
            number += 1
            try:
                u = await self.client.get_entity(int(uid))
                name = u.first_name or "User"
                text += f"{number}. <a href=tg://user?id={u.id}>{name}</a> | <code>{u.id}</code>\n"
            except Exception:
                text += f"{number}. –£–¥–∞–ª—ë–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç | <code>{uid}</code>\n"
            # prevent too long message
            if len(text) > 3000:
                text += "\n<b>–ò —Ç.–¥. (–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)</b>"
                break
        await utils.answer(message, text)

    # -------- Internal helpers & watcher --------
    def _is_allowed(self, uid):
        return uid in self.db.get("Anti-PM", "allowed", [])

    async def _callback_query(self, event: events.CallbackQuery.Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π inline-–∫–Ω–æ–ø–æ–∫: allow/deny/block"""
        try:
            data = event.data.decode() if isinstance(event.data, (bytes, bytearray)) else str(event.data)
            # format: action_{user_id}
            if not data:
                await event.answer()
                return
            parts = data.split("_", 1)
            if len(parts) != 2:
                await event.answer()
                return
            action, sid = parts[0], parts[1]
            try:
                target_id = int(sid)
            except:
                await event.answer("–û—à–∏–±–∫–∞ id.", alert=True)
                return

            # get user entity
            try:
                user = await self.client.get_entity(target_id)
            except:
                user = None

            if action == "allow":
                allowed = set(self.db.get("Anti-PM", "allowed", []))
                allowed.add(target_id)
                self.db.set("Anti-PM", "allowed", list(allowed))
                # reset counters
                self.db.set("Anti-PM", f"count_{target_id}", 0)
                # edit the prompt message
                try:
                    await event.edit(f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ –ø–∏—Å–∞—Ç—å: <a href=tg://user?id={target_id}>{user.first_name if user else target_id}</a>")
                except:
                    pass
                await self.client.send_message("me", f"‚úÖ –†–∞–∑—Ä–µ—à—ë–Ω {user.first_name if user else target_id} ({target_id})")
                await event.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—Ä–µ—à—ë–Ω.")
                return

            if action == "deny":
                # just note deny (do not block). keep them blocked by default (not in allowed).
                try:
                    await event.edit(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: <a href=tg://user?id={target_id}>{user.first_name if user else target_id}</a>")
                except:
                    pass
                await event.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
                return

            if action == "block":
                try:
                    if user:
                        await self.client(functions.contacts.BlockRequest(user))
                    else:
                        # fallback: try by id
                        await self.client(functions.contacts.BlockRequest(id=target_id))
                except Exception as e:
                    logger.exception(e)
                try:
                    await event.edit(f"üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: <a href=tg://user?id={target_id}>{user.first_name if user else target_id}</a>")
                except:
                    pass
                await self.client.send_message("me", f"üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω {user.first_name if user else target_id} ({target_id})")
                await event.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
                return

            await event.answer()
        except Exception as e:
            logger.exception(e)
            try:
                await event.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", alert=True)
            except:
                pass

    async def watcher(self, message):
        """–°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –≤—Ö–æ–¥—è—â–∏–º–∏ –õ–° ‚Äî –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç, –∫–Ω–æ–ø–∫–∏, —Å—á—ë—Ç—á–∏–∫ –∏ –∞–≤—Ç–æ-–±–ª–æ–∫."""
        try:
            # skip service messages / non private
            if not message.is_private:
                return
            # skip self
            if message.sender_id == (await self.client.get_me()).id:
                return

            pm = self.db.get("Anti-PM", "pm")  # original semantics: pm == True -> receiving allowed
            # if receiving is allowed (pm True) => anti-PM is off
            if pm is True:
                return

            # get user entity
            user = await utils.get_user(message)
            uid = message.sender_id

            # bots ALWAYS allowed
            if user and getattr(user, "bot", False):
                allowed = set(self.db.get("Anti-PM", "allowed", []))
                if uid not in allowed:
                    allowed.add(uid)
                    self.db.set("Anti-PM", "allowed", list(allowed))
                return
         
            if self.auto_allow_contacts:
                try:
                    # check if in contacts
                    who = await self.client.get_entity(uid)
                    if isinstance(who, types.User) and who.contact:
                        allowed = set(self.db.get("Anti-PM", "allowed", []))
                        if uid not in allowed:
                            allowed.add(uid)
                            self.db.set("Anti-PM", "allowed", list(allowed))
                        return
                except Exception:
                    pass

            # if already allowed -> do nothing
            if self._is_allowed(uid):
                return

            # increment counter
            key = f"count_{uid}"
            cnt = int(self.db.get("Anti-PM", key, 0)) + 1
            self.db.set("Anti-PM", key, cnt)

            # on first message -> send custom_message with buttons (and store prompt id)
            if cnt == 1:
                text = self.config["custom_message"]
                try:
                    sent = await self.client.send_message(
                        message.chat_id,
                        text,
                        buttons=[
                            [
                                Button.inline("‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å", f"allow_{uid}"),
                                Button.inline("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", f"deny_{uid}"),
                                Button.inline("üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", f"block_{uid}")
                            ]
                        ]
                    )
                    # store prompt message id to optionally edit later
                    self.db.set("Anti-PM", f"prompt_{uid}", sent.id)
                except Exception as e:
                    logger.exception(e)
            # on 3rd message -> auto-block and notify you
            if cnt >= 3:
                # block user
                try:
                    await self.client(functions.contacts.BlockRequest(uid))
                except Exception as e:
                    logger.exception(e)
                # reset counter and remove prompt id
                self.db.set("Anti-PM", key, 0)
                try:
                    prompt_id = self.db.get("Anti-PM", f"prompt_{uid}")
                    if prompt_id:
                        # try to edit prompt to show blocked (best-effort)
                        try:
                            await self.client.edit_message(message.chat_id, prompt_id, f"üîí –ê–≤—Ç–æ-–±–ª–æ–∫: <a href=tg://user?id={uid}>{uid}</a>")
                        except Exception:
                            pass
                        self.db.set("Anti-PM", f"prompt_{uid}", 0)
                except Exception:
                    pass
                # notify you in Saved Messages
                me_name = (await self.client.get_me()).first_name or "You"
                await self.client.send_message("me", f"‚ùó <b>{user.first_name if user else uid}</b> (<code>{uid}</code>) –ø—Ä–∏—Å–ª–∞–ª 3 —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        except Exception as e:
            logger.exception(e)
