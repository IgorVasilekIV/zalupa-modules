"""
fake/custom fetch for rofls üôÇ
"""
# –ò–ò—à–∫–∞ –∫–æ—Ä–º–∏—Ç, –±–æ–ª—å–Ω—ã–µ –º–æ–∑–≥–∏ —Ç–æ–∂–µ
#
# meta developer: @HikkaZPM
#
# The module is made as a joke, all coincidences are random :P
#
#       –∫–æ—Ç –≤–∞—Ö—É–∏
#       /\_____/\
#      /  o   o  \
#     ( ==  ^  == )
#      )         (
#     (           )
#    ( (  )   (  ) )
#   (__(__)___(__)__)
#
#
from .. import loader, utils
from telethon import events
import asyncio
import logging
import platform
import os
import time
from datetime import datetime

logger = logging.getLogger(__name__)

@loader.tds
class FakeNeofetchMod(loader.Module):
    """–ò–º–∏—Ç–∞—Ü–∏—è neofetch --stdout, –∫–∞–Ω–∞–ª —Å –ø—Ä–µ—Å–µ—Ç–∞–º–∏: https://t.me/+t_xLnCad6zM1NmEy (–¥–∞ –ø–∞–¥–∞–∂–∏—Ç–µ –Ω–µ –≥–∞—Ç–æ–≤–∞ –µ—â–æ)"""

    strings = {
        "name": "FFetch",
        "loading": "<b>Loading system information...</b>",
        "custom_host_reset": "<b>Custom host reset to default</b>",
        "_cfg_os": "Custom OS for display",
        "_cfg_hostname": "Custom hostname for display",
        "_cfg_user": "Custom username for display",
        "_cfg_kernel": "Custom kernel for display",
        "_cfg_uptime": "Custom uptime for display",
        "_cfg_packages": "Custom packages for display",
        "_cfg_cpu": "Custom CPU for display",
        "_cfg_ram": "Custom RAM for display",
        "_cfg_enable_delay": "Enable delay before output",
        "_cfg_delay": "Delay before output in seconds",
    }

    strings_ru = {
        "name": "FFetch",
        "loading": "<b>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...</b>",
        "custom_host_reset": "<b>–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ö–æ—Å—Ç —Å–±—Ä–æ—à–µ–Ω –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ</b>",
        "_cfg_os": "–ö–∞—Å—Ç–æ–º–Ω–∞—è –û–° –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        "_cfg_hostname": "–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ö–æ—Å—Ç–Ω–µ–π–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        "_cfg_user": "–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "_cfg_kernel": "–ö–∞—Å—Ç–æ–º–Ω—ã–π —è–¥—Ä–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        "_cfg_uptime": "–ö–∞—Å—Ç–æ–º–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        "_cfg_packages": "–ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        "_cfg_cpu": "–ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        "_cfg_enable_delay": "–í–∫–ª—é—á–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º",
        "_cfg_delay": "–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º –≤ —Å–µ–∫—É–Ω–¥–∞—Ö",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "os",
                "Arch Linux",
                doc=lambda: self.strings["_cfg_os"],
                validator=loader.validators.String(min_length=1, max_length=20)
            ),
            loader.ConfigValue(
                "hostname",
                "archbtw",
                doc=lambda: self.strings["_cfg_hostname"],
                validator=loader.validators.String(min_length=1, max_length=20)
            ),
            loader.ConfigValue(
                "user",
                "root",
                doc=lambda: self.strings["_cfg_user"],
                validator=loader.validators.String(min_length=1, max_length=20),
            ),
            loader.ConfigValue(
                "kernel",
                "Linux 6.2.0-arch1",
                doc=lambda: self.strings["_cfg_kernel"],
                validator=loader.validators.String(min_length=1, max_length=20),
            ),
            loader.ConfigValue(
                "uptime",
                "69 days, 4 hours, 20 minutes",
                doc=lambda: self.strings["_cfg_uptime"],
                validator=loader.validators.String(min_length=1, max_length=50),
            ),
            loader.ConfigValue(
                "packages",
                1337,
                doc=lambda: self.strings["_cfg_packages"],
                validator=loader.validators.Integer(min_value=0, max_value=999999999),
            ),
            loader.ConfigValue(
                "cpu",
                "AMD Ryzen 9 7950X",
                doc=lambda: self.strings["_cfg_cpu"],
                validator=loader.validators.String(min_length=1, max_length=50),
            ),
            loader.ConfigValue(
                "ram",
                "64GB / 128GB",
                doc=lambda: self.strings["_cfg_ram"],
                validator=loader.validators.String(min_length=1, max_length=50),
            ),
            loader.ConfigValue(
                "enable_delay",
                True,
                doc=lambda: self.strings["_cfg_enable_delay"],
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "delay",
                1.5,
                doc=lambda: self.strings["_cfg_delay"],
                validator=loader.validators.Float(min_value=0.0, max_value=999999999.0),
            ),
        )

    async def client_ready(self, client, db):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        self._client = client
        self._db = db
        self._me = await client.get_me()

    @loader.command(ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–µ–π–∫–æ–≤—ã–π neofetch —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ö–æ—Å—Ç–æ–º")
    async def fneo(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–µ–π–∫–æ–≤—ã–π –≤—ã–≤–æ–¥ neofetch —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ö–æ—Å—Ç–æ–º"""
        msg = await utils.answer(message, self.strings["loading"])

        if self.config["ENABLE_DELAY"]:
            await asyncio.sleep(float(self.config['DELAY']))

        current_time = datetime.now().strftime("%H:%M:%S")


        system_info = f"""
{self.config['CUSTOM_USER']}@{self.config['CUSTOM_HOSTNAME']}
-----------------
OS: {self.config['CUSTOM_OS']}
Kernel: {self.config['CUSTOM_KERNEL']}
Uptime: {self.config['CUSTOM_UPTIME']}
Packages: {self.config['CUSTOM_PACKAGES']}
CPU: {self.config['CUSTOM_CPU']}
Memory: {self.config['CUSTOM_MEMORY']}"""

        output = f"<pre>{system_info}</pre>\n<b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {self.config['DELAY']} —Å–µ–∫—É–Ω–¥.</b>"
        await utils.answer(msg, output)

    @loader.command(ru_doc="–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö")
    async def resetneofetch(self, message):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ neofetch –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö"""
        self.config["CUSTOM_OS"] = "Arch Linux"
        self.config["CUSTOM_HOSTNAME"] = "archbtw"
        self.config["CUSTOM_USER"] = "root"
        self.config["CUSTOM_KERNEL"] = "Linux 6.2.0-arch1"
        self.config["CUSTOM_UPTIME"] = "69 days, 4 hours, 20 minutes"
        self.config["CUSTOM_PACKAGES"] = "1337"
        self.config["CUSTOM_CPU"] = "AMD Ryzen 9 7950X"
        self.config["CUSTOM_MEMORY"] = "64GB / 128GB"
        self.config["DELAY"] = "1.5"

        await utils.answer(message, self.strings["custom_host_reset"])
