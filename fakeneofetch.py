"""
    –§–µ–π–∫ —Ñ–µ—Ç—á –¥–ª—è —Ä–æ—Ñ–ª–æ–≤
    (–æ—Ö —É–∂ —ç—Ç–æ—Ç —Ä–Ω7)
"""
# meta developer: @HikkaZPM

from .. import loader, utils
from telethon import events
import asyncio
import random
import logging
import platform
import os
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –º–æ–¥—É–ª—è
@loader.tds
class FNeoMod(loader.Module):
    """–ò–º–∏—Ç–∞—Ü–∏—è neofetch —Å –ª–æ–≥–æ"""
    
    strings = {
        "name": "FakeNeofetch",
        "loading": "<b>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...</b>",
        "custom_host_reset": "<b>–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ö–æ—Å—Ç —Å–±—Ä–æ—à–µ–Ω –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ</b>",
    }
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    def __init__(self):
        self.config = loader.ModuleConfig(
            "CUSTOM_HOST", "Arch Linux", "–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ö–æ—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            "CUSTOM_USER", "root", "–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "CUSTOM_KERNEL", "Linux 6.2.0-arch1", "–ö–∞—Å—Ç–æ–º–Ω–æ–µ —è–¥—Ä–æ",
            "CUSTOM_UPTIME", "69 days, 4 hours, 20 minutes", "–ö–∞—Å—Ç–æ–º–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã",
            "CUSTOM_PACKAGES", "1337", "–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤",
            "CUSTOM_SHELL", "fish", "–ö–∞—Å—Ç–æ–º–Ω–∞—è –æ–±–æ–ª–æ—á–∫–∞",
            "CUSTOM_RESOLUTION", "3840x2160", "–ö–∞—Å—Ç–æ–º–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ",
            "CUSTOM_DE", "hyprland", "–ö–∞—Å—Ç–æ–º–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞",
            "CUSTOM_THEME", "Dracula", "–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ç–µ–º–∞",
            "CUSTOM_CPU", "AMD Ryzen 9 7950X", "–ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä",
            "CUSTOM_GPU", "NVIDIA RTX 4090", "–ö–∞—Å—Ç–æ–º–Ω–∞—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞",
            "CUSTOM_MEMORY", "64GB / 128GB", "–ö–∞—Å—Ç–æ–º–Ω–∞—è –ø–∞–º—è—Ç—å (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ / –≤—Å–µ–≥–æ)",
            "ENABLE_DELAY", True, "–í–∫–ª—é—á–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º",
            "DELAY", "1.5", "–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º (—Å–µ–∫—É–Ω–¥—ã –æ–∫–¥–∞)"
            "SHOW_COLORS", False, "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É",
            "BREAK", "--------------------------" "–†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–∏"
        )
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    async def client_ready(self, client, db):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        self._client = client
        self._db = db
        self._me = await client.get_me()
    
    @loader.command(ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–µ–π–∫–æ–≤—ã–π neofetch —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ö–æ—Å—Ç–æ–º")
    async def fakeneofetch(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–µ–π–∫–æ–≤—ã–π –≤—ã–≤–æ–¥ neofetch —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ö–æ—Å—Ç–æ–º"""
        msg = await utils.answer(message, self.strings["loading"])
        
        if self.config["ENABLE_DELAY"]:
            await asyncio.sleep(self.config['DELAY'])
        
        current_time = datetime.now().strftime("%H:%M:%S")
        
        # –ü–æ –∂–µ–ª–∞–Ω–∏—é –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π (–¥–æ–±–∞–≤–ª—é –≤ TODO —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–±—Ä–∞—Ç—å –û–°)
        logo = """
<pre>
                   -`                    
                  .o+`                   
                 `ooo/                   
                `+oooo:                  
               `+oooooo:                
               -+oooooo+:                
             `/:-:++oooo+:               
            `/++++/+++++++:              
           `/++++++++++++++:             
          `/+++ooooooooooooo/`           
         ./ooosssso++osssssso+`          
        .oossssso-````/ossssss+`         
       -osssssso.      :ssssssso.        
      :osssssss/        osssso+++.       
     /ossssssss/        +ssssooo/-       
   `/ossssso+/:-        -:/+osssso+-     
  `+sso+:-`                 `.-/+oso:    
 `++:.                           `-/+/   
 .`                                 `/   
"""
        
        system_info = f"""
{self.config['CUSTOM_USER']}@{self.config['CUSTOM_HOST']}
{self.config['BREAK']}
OS: {self.config['CUSTOM_HOST']}
Kernel: {self.config['CUSTOM_KERNEL']}
Uptime: {self.config['CUSTOM_UPTIME']}
Packages: {self.config['CUSTOM_PACKAGES']}
Shell: {self.config['CUSTOM_SHELL']}
Resolution: {self.config['CUSTOM_RESOLUTION']}
DE: {self.config['CUSTOM_DE']}
Theme: {self.config['CUSTOM_THEME']}
CPU: {self.config['CUSTOM_CPU']}
GPU: {self.config['CUSTOM_GPU']}
Memory: {self.config['CUSTOM_MEMORY']}
"""
        
        # —Ö–∑ –∑–∞—á–µ–º –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç
        if self.config["SHOW_COLORS"]:
            colors = """
Colors: 
<b>üü• üüß üü® üü© üü¶ üü™ ‚¨õ ‚¨ú</b>
"""
            system_info += colors
        
        output = f"{logo}\n{system_info}"

        execution_time = f"\n<code>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {self.config['DELAY']} —Å–µ–∫—É–Ω–¥.</code>"
        output += execution_time

        await utils.answer(msg, output + "</pre>")
        
    @loader.command(ru_doc="–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö")
    async def resetneofetch(self, message):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ neofetch –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö"""

        self.config["CUSTOM_HOST"] = "Arch Linux"
        self.config["CUSTOM_USER"] = "root"
        self.config["CUSTOM_KERNEL"] = "Linux 6.2.0-arch1"
        self.config["CUSTOM_UPTIME"] = "69 days, 4 hours, 20 minutes"
        self.config["CUSTOM_PACKAGES"] = "1337"
        self.config["CUSTOM_SHELL"] = "fish"
        self.config["CUSTOM_RESOLUTION"] = "3840x2160"
        self.config["CUSTOM_DE"] = "hyprland"
        self.config["CUSTOM_THEME"] = "Dracula"
        self.config["CUSTOM_CPU"] = "AMD Ryzen 9 7950X"
        self.config["CUSTOM_GPU"] = "NVIDIA RTX 4090"
        self.config["CUSTOM_MEMORY"] = "64GB / 128GB"
        self.config["BREAK"] = "--------------------------"
        self.config["DELAY"] = "1.5"
        
        await utils.answer(message, self.strings["custom_host_reset"])
