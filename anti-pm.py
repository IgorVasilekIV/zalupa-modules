__version__ = (2, 3, 2)

"""
üòò fork info: Inline buttons in PM (Allow/Deny/Block); auto-allow contacts; bots always allowed; auto-block after 3 msgs + notify (Saved Messages); pretty .allowed listing
"""

from .. import loader, utils
from telethon import functions, types
import logging

logger = logging.getLogger(__name__)

@loader.tds
class AntiPMMod(loader.Module):
    """Anti-PM with inline buttons (Hikka inline.form), auto-allow contacts, auto-block after 3 msgs, notifications"""

    strings = {
        "name": "Anti-PM",
        "pm_off": "<b>–¢–µ–ø–µ—Ä—å –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</b>",
        "pm_on": "<b>–í—ã –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</b>",
        "pm_allowed": "<b>–Ø —Ä–∞–∑—Ä–µ—à–∏–ª {} –ø–∏—Å–∞—Ç—å –º–Ω–µ.</b>",
        "pm_deny": "<b>–Ø –∑–∞–ø—Ä–µ—Ç–∏–ª {} –ø–∏—Å–∞—Ç—å –º–Ω–µ.</b>",
        "blocked": "<b>{} –±—ã–ª –∑–∞–Ω–µ—Å—ë–Ω –≤ –ß–µ—Ä–Ω—ã–π –°–ø–∏—Å–æ–∫.</b>",
        "unblocked": "<b>{} –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –ß–µ—Ä–Ω–æ–≥–æ –°–ø–∏—Å–∫–µ.</b>",
        "addcontact": "<b>{} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã.</b>",
        "delcontact": "<b>{} —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.</b>",
        "who_to_block": "<b>–£–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.</b>",
        "who_to_unblock": "<b>–£–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.</b>",
        "who_to_contact": "<b>–£–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ç–∞–∫—Ç.</b>",
        "who_to_delcontact": "<b>–£–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.</b>",
        "no_args": "<b>–ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ä–µ–ø–ª–∞—è.</b>",
        "not_pm": "<b>–≠—Ç–æ –Ω–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.</b>",
        "allowed_header": "<b>–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n",
        "_cfg_custom_message": "–ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–µ –Ω–∞ –õ–°",
    }

    strings_ru = {**strings}

    def __init__(self):
        self.me = None
        # config: only custom_message
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "custom_message",
                "–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –≤–∫–ª—é—á—ë–Ω –∞–≤—Ç–æ–±–ª–æ–∫. –ù–∞–ø–∏—à–∏ –≤—Å—ë –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –æ–∂–∏–¥–∞–π –æ—Ç–≤–µ—Ç–∞.",
                lambda: self.strings("_cfg_custom_message"),
            ),
        )
        self.auto_allow_contacts = True

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.me = await client.get_me()

    # -------- Commands --------
    async def pmcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π: .pm ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏-PM (–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å)."""
        pm = self.db.get("Anti-PM", "pm")
        if pm is not True:
            await utils.answer(message, self.strings["pm_off"])
            self.db.set("Anti-PM", "pm", True)
        else:
            await utils.answer(message, self.strings["pm_on"])
            self.db.set("Anti-PM", "pm", False)

    async def allowcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π: .allow ‚Äî —Ä–∞–∑—Ä–µ—à–∏—Ç—å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–∏—Å–∞—Ç—å –≤–∞–º –≤ –ª–∏—á–∫—É."""
        if not message.is_private:
            return await message.edit(self.strings["not_pm"])
        user = await message.client.get_entity(message.chat_id)
        allowed = set(self.db.get("Anti-PM", "allowed", []))
        allowed.add(user.id)
        self.db.set("Anti-PM", "allowed", list(allowed))
        self.db.set("Anti-PM", f"count_{user.id}", 0)
        await utils.answer(message, self.strings["pm_allowed"].format(user.first_name))

    async def blockcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π: .block ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–ø–ª–∞–π/–∞—Ä–≥—É–º–µ–Ω—Ç)."""
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        try:
            if message.is_private:
                user = await message.client.get_entity(message.chat_id)
            else:
                if reply:
                    user = await message.client.get_entity(reply.sender_id)
                else:
                    if not args:
                        return await message.edit(self.strings["who_to_block"])
                    user = await message.client.get_entity(int(args) if args.isnumeric() else args)
            await message.client(functions.contacts.BlockRequest(user))
            await utils.answer(message, self.strings["blocked"].format(user.first_name))
        except Exception:
            logger.exception("Error in .block command")

    async def allowedcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π: .allowed ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        try:
            allowed = self.db.get("Anti-PM", "allowed", [])
            if not allowed:
                return await utils.answer(message, "<b>–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.</b>")
            text = self.strings["allowed_header"]
            number = 0
            for uid in allowed:
                number += 1
                try:
                    u = await self.client.get_entity(int(uid))
                    name = u.first_name or "User"
                    text += f"{number}. <a href=tg://user?id={u.id}>{name}</a> | <code>{u.id}</code>\n"
                except Exception:
                    text += f"{number}. –£–¥–∞–ª—ë–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç | <code>{uid}</code>\n"
                if len(text) > 3000:
                    text += "\n<b>–ò —Ç.–¥. (–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)</b>"
                    break
            await utils.answer(message, text)
        except Exception:
            logger.exception("Error in .allowed command")

    async def disallowcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π: .disallow ‚Äî —É–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö (—Ä–µ–ø–ª–∞–π/–≤ –ª—Å/–ø–æ id)."""
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        try:
            if message.is_private:
                user = await message.client.get_entity(message.chat_id)
            else:
                if reply:
                    user = await message.client.get_entity(reply.sender_id)
                else:
                    if not args:
                        return await message.edit(self.strings["no_args"])
                    user = await message.client.get_entity(int(args) if args.isnumeric() else args)
        except Exception:
            return await message.edit("<b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</b>")

        try:
            allowed = set(self.db.get("Anti-PM", "allowed", []))
            if int(user.id) in allowed:
                allowed.discard(int(user.id))
                self.db.set("Anti-PM", "allowed", list(allowed))
                self.db.set("Anti-PM", f"count_{user.id}", 0)
                await utils.answer(message, self.strings.get("pm_deny", "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–±—Ä–∞–Ω –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.</b>").format(user.first_name))
            else:
                await utils.answer(message, "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Ç–∞–∫ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.</b>")
        except Exception:
            logger.exception("Error in .disallow command")


    async def reportcmd(self, message):
            """User report for spam."""
            args = utils.get_args_raw(message)
            reply = await message.get_reply_message()
            if message.chat_id != (await message.client.get_me()).id and message.is_private:
                user = await message.client.get_entity(message.chat_id)
            else:
                if args:
                    user = await message.client.get_entity(
                        args if not args.isnumeric() else int(args)
                    )
                if reply:
                    user = await message.client.get_entity(reply.sender_id)
                else:
                    return await message.edit("<b>Who I must report?</b>")
    
            await message.client(functions.messages.ReportSpamRequest(peer=user.id))
            await message.edit("<b>You get report for spam!</b>")

    def _is_allowed(self, uid):
        return uid in self.db.get("Anti-PM", "allowed", [])

    def _get_call_uid(self, call):
        """–ü–æ–ø—ã—Ç–∫–∏ –Ω–∞–π—Ç–∏ user id –≤ –æ–±—ä–µ–∫—Ç–µ call/message. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç int –∏–ª–∏ None."""
        try:
            # –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ call.message.to_id.user_id
            m = getattr(call, "message", None)
            if m:
                to_id = getattr(m, "to_id", None)
                if to_id and getattr(to_id, "user_id", None):
                    return int(to_id.user_id)
                # —á–µ—Ä–µ–∑ peer_id.user_id
                peer = getattr(m, "peer_id", None)
                if peer and getattr(peer, "user_id", None):
                    return int(peer.user_id)
                # —á–µ—Ä–µ–∑ chat / chat.id / chat_id
                chat = getattr(m, "chat", None)
                if chat and getattr(chat, "id", None):
                    return int(chat.id)
                if getattr(m, "chat_id", None):
                    return int(m.chat_id)
            # —á–µ—Ä–µ–∑ –ø–æ–ª—è —Å–∞–º–æ–≥–æ call (sender_id / from_id)
            if getattr(call, "sender_id", None):
                return int(call.sender_id)
            if getattr(call, "from_id", None):
                return int(call.from_id)
            # –µ—Å–ª–∏ data –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç id (–Ω–∞ —Å–ª—É—á–∞–π), –ø–∞—Ä—Å–∏–º —á–∏—Å–ª–∞
            data = None
            try:
                data = call.data.decode() if isinstance(call.data, (bytes, bytearray)) else call.data
            except Exception:
                data = None
            if isinstance(data, str):
                for part in data.split("_"):
                    if part.isdigit():
                        return int(part)
        except Exception:
            logger.exception("Error while extracting uid from callback")
        return None

    def _parse_call_data(self, call):
            """–î–æ—Å—Ç–∞—ë–º action –∏ uid –∏–∑ call.data"""
            data = None
            try:
                data = call.data.decode() if isinstance(call.data, (bytes, bytearray)) else str(call.data)
            except Exception:
                pass
            if not data or ":" not in data:
                return None, None
            action, uid_str = data.split(":", 1)
            try:
                uid = int(uid_str)
            except Exception:
                uid = None
            return action, uid

    async def _btn_allow(self, call, uid: int):
        if call.from_user.id != uid:
            return await call.answer("‚ùå –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è.", alert=True)
    
        allowed = set(self.db.get("Anti-PM", "allowed", []))
        allowed.add(uid)
        self.db.set("Anti-PM", "allowed", list(allowed))
        self.db.set("Anti-PM", f"count_{uid}", 0)
    
        await call.edit(f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ –ø–∏—Å–∞—Ç—å: <a href=tg://user?id={uid}>{uid}</a>")
        await self.client.send_message("me", f"‚úÖ –†–∞–∑—Ä–µ—à—ë–Ω {uid}")
        await call.answer("–†–∞–∑—Ä–µ—à–µ–Ω–æ.")
    
    async def _btn_deny(self, call, uid: int):
        if call.from_user.id != uid:
            return await call.answer("‚ùå –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è.", alert=True)
    
        await call.edit(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: <a href=tg://user?id={uid}>{uid}</a>")
        await call.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
    
    async def _btn_block(self, call, uid: int):
        if call.from_user.id != uid:
            return await call.answer("‚ùå –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è.", alert=True)
    
        try:
            user = await self.client.get_entity(uid)
            await self.client(functions.contacts.BlockRequest(user))
        except Exception:
            try:
                await self.client(functions.contacts.BlockRequest(id=uid))
            except Exception:
                pass
    
        await call.edit(f"üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: <a href=tg://user?id={uid}>{uid}</a>")
        await self.client.send_message("me", f"üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω {uid}")
        await call.answer("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
                   
    # -------- Watcher --------
    async def watcher(self, message):
        """–°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –≤—Ö–æ–¥—è—â–∏–º–∏ –õ–° ‚Äî –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç, –∫–Ω–æ–ø–∫–∏, —Å—á—ë—Ç—á–∏–∫ –∏ –∞–≤—Ç–æ-–±–ª–æ–∫."""
        try:
            if not message.is_private:
                return
            if message.sender_id == (await self.client.get_me()).id:
                return

            pm = self.db.get("Anti-PM", "pm")
            if pm is True:
                return

            user = await utils.get_user(message)
            uid = message.sender_id

            # –±–æ—Ç—ã –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if user and getattr(user, "bot", False):
                try:
                    allowed = set(self.db.get("Anti-PM", "allowed", []))
                    if uid not in allowed:
                        allowed.add(uid)
                        self.db.set("Anti-PM", "allowed", list(allowed))
                except Exception:
                    logger.exception("Error auto-allowing bot")
                return

            # –∞–≤—Ç–æ-–ø—Ä–æ–ø—É—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–∂—ë—Å—Ç–∫–æ –≤–∫–ª—é—á–µ–Ω–æ)
            if self.auto_allow_contacts:
                try:
                    who = await self.client.get_entity(uid)
                    if isinstance(who, types.User) and who.contact:
                        allowed = set(self.db.get("Anti-PM", "allowed", []))
                        if uid not in allowed:
                            allowed.add(uid)
                            self.db.set("Anti-PM", "allowed", list(allowed))
                        return
                except Exception:
                    logger.exception("Error checking contacts for auto-allow")

            if self._is_allowed(uid):
                return

            key = f"count_{uid}"
            cnt = int(self.db.get("Anti-PM", key, 0)) + 1
            self.db.set("Anti-PM", key, cnt)

            if cnt == 1:
                text = self.config["custom_message"]
                try:
                    await self.inline.form(
                        text=f"‚ùó –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç <a href=tg://user?id={uid}>{uid}</a> –Ω–∞–ø–∏—Å–∞–ª:\n\n{message.text}",
                        reply_markup=[
                            [
                                {"text": "‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å", "callback": self._btn_allow, "args": (uid,)},
                                {"text": "‚ùå –ó–∞–ø—Ä–µ—Ç–∏—Ç—å", "callback": self._btn_deny, "args": (uid,)},
                                {"text": "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", "callback": self._btn_block, "args": (uid,)},
                            ]
                        ],
                        chat="me"
                    )
                    self.db.set("Anti-PM", f"prompt_{uid}", getattr(sent, "id", 0))
                except Exception:
                    logger.exception("Error sending inline form in watcher")

            if cnt >= 3:
                try:
                    await self.client(functions.contacts.BlockRequest(uid))
                except Exception:
                    logger.exception("Auto block failed in watcher")
                self.db.set("Anti-PM", key, 0)
                try:
                    prompt_id = self.db.get("Anti-PM", f"prompt_{uid}")
                    if prompt_id:
                        try:
                            await self.client.edit_message(message.chat_id, prompt_id, f"üîí –ê–≤—Ç–æ-–±–ª–æ–∫: <a href=tg://user?id={uid}>{uid}</a>")
                        except Exception:
                            logger.exception("Failed to edit prompt after auto-block")
                        self.db.set("Anti-PM", f"prompt_{uid}", 0)
                except Exception:
                    logger.exception("Error handling prompt cleanup after auto-block")
                try:
                    await self.client.send_message(uid, f"‚ùó <b>{user.first_name if user else uid}</b> (<code>{uid}</code>) –ø—Ä–∏—Å–ª–∞–ª 3 —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
                except Exception:
                    logger.exception("Failed to send notification to Saved Messages after auto-block")
        except Exception:
            logger.exception("Unhandled error in watcher")
